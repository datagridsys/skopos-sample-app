doctype: "com.datagridsys.doctype/skopos/model"
version: 1

lifecycle:
    pre_flight:
        steps:
            - call:
                plugin: docker
                action: network_create
                label: "Ensure project network exists"

components:
    nginx:
        image    : datagridsys/sample-lb:1.0
        replicas : 1
        singleton: true
        uses:
            vote : {}
        visual:
            x: 300
            y: 80
    vote:
        image: datagridsys/sample-vote:2.0
        replicas: 3
        lifecycle:
            post_instance_attach:
                steps:
                  - call:
                      plugin   : docker
                      action   : comp_signal
                      arguments:  { target: "nginx", signal: "HUP" }
            post_instance_detach:
                steps:
                  - call:
                      plugin   : docker
                      action   : comp_signal
                      arguments:  { target: "nginx", signal: "HUP" }
            quality_probe:
                steps:
                    - exec:
                        label: "Verify new vote operation"
                        arguments: [ "gate-vote-ok", "{{.id}}" ]
                    - exec:
                        label: "Verify new vote response time"
                        arguments: [ "gate-vote-perf", "{{.id}}" ]
        provides:
            ports: [ "80" ]
        uses:
            redis: {}
        visual:
            x: 600
            y: 80

    redis:
        image: redis:3.2.2
        replicas: 1                     # uses the stateless template
        visual:
            x: 900
            y: 180
        lifecycle:
            post_instance_detach:       # s/b integration_probe (last forward-only injection before destroy)
                steps:
                    - exec:
                        label: "Drain redis worker tasks"
                        arguments: [ 'gate-drain-redis', '{{.id}}' ]
                    - call:
                        plugin: docker
                        action: comp_signal
                        label: "Re-attach workers to redis"
                        arguments:  { target: "worker", signal: "INT" }
            quality_probe:
                steps:
                    - exec:
                        label: "Verify new redis performance (30s timeout)"
                        arguments: [ 'gate-redis-perf', "{{.id}}", '30s' ]

    worker:
        image: datagridsys/sample-worker:1.0
        replicas: 2
        uses:
            db: {}
            redis: {}
        visual:
            x: 600
            y: 280
        lifecycle:
            quality_probe:
                steps:
                    - exec:
                        label: "Verify new worker operation"
                        arguments: [ "gate-worker-ok", "{{.id}}" ]
                    - exec:
                        label: "Verify new worker performance"
                        arguments: [ "gate-worker-perf", "{{.id}}" ]

    db:
        image: postgres:9.4
        singleton: true
        visual:
            x: 900
            y: 380
        lifecycle:
            quality_probe:
                steps:
                    - exec:
                        label: "Verify new db operation (30s timeout)"
                        arguments: [ "gate-postgres-ok", "{{.id}}", "30s" ]

    result:
        image: datagridsys/sample-result:2.0
        singleton: true
        provides:
            ports: [ "80" ]
        uses:
            db: {}
        visual:
            x: 600
            y: 480
        lifecycle:
            quality_probe:
                steps:
                    - exec:
                        label: "Verify new result operation"
                        arguments: [ "gate-result-ok", "{{.id}}" ]

gateways:
    vote-in:
        type: host_port
        target: ["nginx"]
        exposes:
            - port: "8880"
              target_port: "80"
        visual:
            x: 20
            y: 80
    result-in:
        type: host_port
        exposes:
            - port: "8881"
              target_port: "80"
        target: [result]
        visual:
            x: 20
            y: 480

